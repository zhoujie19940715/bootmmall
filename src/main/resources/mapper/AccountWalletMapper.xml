<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhoujie.mall.dao.AccountWalletMapper" >
  <resultMap id="BaseResultMap" type="com.zhoujie.mall.pojo.AccountWallet" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_open_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="pay_password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="is_open" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="check_key" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="version" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_open_id, user_amount, create_time, update_time, pay_password, is_open, check_key, 
    version
  </sql>


  <select id="selectByOpenId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from account_wallet
    where user_open_id = #{openId}
  </select>

  <select id="selectAll" resultMap="BaseResultMap" parameterType="java.util.Map" >
    select
    <include refid="Base_Column_List" />
    from account_wallet

  </select>


  <delete id="deleteByOpenId" parameterType="java.lang.String" >
    delete from account_wallet
    where user_open_id = #{openId}
  </delete>

  <insert id="insert" parameterType="com.zhoujie.mall.pojo.AccountWallet" >
    insert into account_wallet ( user_open_id, user_amount,
      create_time, update_time, pay_password, 
      is_open, check_key, version
      )
    values (#{userOpenId,jdbcType=VARCHAR}, #{userAmount,jdbcType=DECIMAL},
      now(), now(), #{payPassword,jdbcType=VARCHAR},
      #{isOpen,jdbcType=INTEGER}, #{checkKey,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}
      )
  </insert>



  <update id="updateByPrimaryKeySelective" parameterType="com.zhoujie.mall.pojo.AccountWallet" >
    update account_wallet
    <set >
      <if test="userOpenId != null" >
        user_open_id = #{userOpenId,jdbcType=VARCHAR},
      </if>
      <if test="userAmount != null" >
        user_amount = #{userAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{now()},
      </if>
      <if test="payPassword != null" >
        pay_password = #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="isOpen != null" >
        is_open = #{isOpen,jdbcType=INTEGER},
      </if>
      <if test="checkKey != null" >
        check_key = #{checkKey,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>


  <update id="updateByOpenId" parameterType="com.zhoujie.mall.pojo.AccountWallet" >
    update account_wallet
    <set >
      <if test="userAmount != null" >
        user_amount = #{userAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = now(),
      </if>
      <if test="payPassword != null" >
        pay_password = #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="isOpen != null" >
        is_open = #{isOpen,jdbcType=INTEGER},
      </if>
      <if test="checkKey != null" >
        check_key = #{checkKey,jdbcType=VARCHAR}
      </if>

    </set>
    where user_open_id = #{userOpenId}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.zhoujie.mall.pojo.AccountWallet" >
    update account_wallet
    set user_open_id = #{userOpenId,jdbcType=VARCHAR},
      user_amount = #{userAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      pay_password = #{payPassword,jdbcType=VARCHAR},
      is_open = #{isOpen,jdbcType=INTEGER},
      check_key = #{checkKey,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>